// Code generated by go-bindata.
// sources:
// tmpl/list.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplListHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x51\x8f\xe3\x26\x10\x7e\xbf\x5f\x41\xf3\x6e\xd3\xdd\x9e\xaa\xaa\xf2\x45\x6a\xb5\x52\x7b\x0f\xed\x43\x77\xa5\x3e\x8f\x61\x1c\xb8\xc3\x60\x01\xde\xbd\x68\x95\xff\xde\x81\xd8\x49\x6c\xc7\x9b\xab\xb4\x79\x09\x30\xdf\xc0\xcc\x37\xf3\x81\xab\x1f\xa4\x13\x71\xdf\x21\x53\xb1\x35\xdb\x0f\xd5\xf1\x8f\xb1\x4a\x21\xc8\x34\xa0\x61\xd4\xd1\xe0\xf6\xc9\xf9\x3e\x54\xfc\x38\xf9\x70\xb4\x18\x6d\xbf\x32\x8f\xe6\xd3\x26\xc4\xbd\xc1\xa0\x10\xe3\x86\x29\x8f\xcd\xa7\x8d\x8a\xb1\x0b\xbf\x72\x2e\xa4\xfd\x12\x4a\x61\x5c\x2f\x1b\x03\x1e\x4b\xe1\x5a\x0e\x5f\xe0\x1b\x37\xba\x0e\xbc\xee\x4d\x0b\xfc\xc7\xf2\xae\xbc\xe7\x22\x0c\xf3\xb2\xd5\xb6\xa4\xd9\x86\xf1\xed\xbb\x9d\xd4\x38\x1b\x0b\x78\xc1\xe0\x5a\xe4\x1f\xcb\x9f\xcb\x9f\xf2\x81\x97\xcb\xb3\x73\x2b\x3e\xb2\x50\xd5\x4e\xee\x87\x50\x02\x8a\xa8\x9d\x65\xc2\x40\x08\x74\x3a\x7a\xc7\x74\x28\x3a\xaf\x5b\xf0\xfb\x34\xac\x9d\x91\x9b\x23\x9a\xf0\x52\x3f\x5f\x62\x8b\xb4\xd5\xc9\x3a\xb5\x0b\x8a\x05\xb4\x45\x7f\x61\x4f\xb5\xb8\x1b\x01\x99\xfd\xcd\x58\x0b\x75\x37\x85\xdd\x8f\xb0\xd0\xd7\x03\xf2\x51\xb7\x9d\x41\x16\x14\xf1\x01\x35\x8d\xa2\xf3\x1e\x6d\x64\x01\xfd\x33\x7a\xda\xe3\xfe\x22\x14\x4e\xb1\x9c\xe2\x3e\x4f\x2a\x3e\xe4\x3c\xd6\x7d\x46\xc1\x30\xbd\x9a\xb2\x70\xa6\x6f\x6d\x58\x4d\x38\x59\x13\x67\x0a\x4c\x33\xcd\xda\xc2\x09\x66\xf0\x19\xcd\xc4\x3a\xdd\x26\xdb\x0b\x1d\xb1\x65\x0a\x42\x11\xf1\x5b\x2c\x04\x65\x89\x1e\xe5\xcc\x8d\x1c\xbb\x73\x39\x40\x6a\xbb\xcb\x7c\x26\x52\x88\xd2\x6e\x1d\x3d\x30\xfa\xfa\x6a\xd0\xb2\xf2\x1f\x14\xce\xcb\x70\x38\x2c\x7c\x26\x2c\xbe\x7f\xac\x0f\x3a\x7c\x65\x8f\x1d\x08\xfc\xbe\x68\xcb\xdf\x9e\x41\x9b\x54\xfb\xe4\x99\x1d\x0f\x07\xf6\xc7\xef\xb7\xe3\xae\x38\x95\x60\xd1\x1d\xff\xbb\x8e\xe0\xa3\x16\xd4\x79\x03\xb4\xc5\x10\x60\x87\x09\xfb\x02\xde\xe6\x9c\x56\xc9\x1a\xc0\x45\xca\x3e\xa9\xe2\xdf\xa3\xc7\x0d\x8a\x47\xaf\x99\xd2\x8e\xbf\x27\x75\x12\x41\x60\xa4\x0a\x26\xd1\x60\x44\xc9\xa0\xa1\x1a\xb0\x8f\xbf\x30\xe5\x7a\x1f\x98\xec\x13\x6e\xd0\x09\x6b\xf5\xce\x43\x6a\xf2\xf2\x16\x67\x43\xba\x6f\xab\xea\xaa\x50\x96\xda\xaf\x62\xd6\xec\x58\xd2\x3c\x21\xde\x42\xf4\xba\x9b\x75\x4b\x15\xcf\x37\xf6\x79\xcd\x2f\x1a\x24\xaa\xed\xdf\xd0\x52\xef\xd0\xe0\x8a\xed\x51\x5b\xb1\x6a\x7c\x70\x2f\xd6\x38\x90\x4b\x3b\xad\xf8\x29\x0d\x8b\x70\xaa\x78\xbe\x43\xc7\xdf\xeb\xab\x07\x4b\xbd\x70\x56\xd3\xed\xf8\x65\xea\xe9\x94\x42\x92\x5e\x94\x2b\x80\x9c\xc7\x2a\x62\x64\x94\xb8\xd4\xe2\xe2\xe2\xba\x00\xc1\xf0\xb8\x70\x09\x11\x38\xed\xf8\xd9\x36\xee\x4f\x08\xea\x70\x28\x23\xf8\x2b\x2e\xe4\xa4\xc7\x8d\x1b\x60\x0d\x14\x3b\xe3\x6a\xd2\x60\xc5\xf5\x95\x03\x38\x2c\x02\x5b\x04\x3b\xa7\x35\x31\x86\x56\x4e\x68\x22\xcc\x94\x58\x5a\x48\x8d\xf2\x3d\xf7\x78\xe3\x5c\xea\xf9\x31\xe8\x3c\x5b\xb9\xc5\xaf\x34\xe7\xcc\x9e\x5e\x95\xb7\x6f\xb4\x6a\x7e\xe3\x50\x23\x3b\xbb\x1b\x9f\xb3\x61\xc6\xea\xfd\x99\xfe\xf4\xb6\xd3\xd3\x2e\x31\x2a\x5d\x36\x74\xfc\x93\xd2\x35\xf4\x26\xb2\x07\xec\x63\x10\x2a\xf1\x38\xd5\x64\x12\x78\x20\x09\x0b\x12\x8e\x93\x49\x30\xcc\x68\x8a\x27\x90\xc6\xe7\xfb\xba\x8e\xd6\x33\xb6\x74\x7e\xc7\x07\x5c\xe0\xad\x8e\xc5\x30\x29\x3b\xd5\x6d\xb6\x7f\x7d\x7e\x9a\x55\x6c\x76\x7f\x2e\x72\x83\x53\x93\xa5\x0e\x9b\x7d\xaa\xec\x74\x54\x7d\x9d\x3f\x50\x72\x6a\x3c\x26\x0a\x96\xd7\xff\xbc\xa1\xb2\xdb\x95\x8e\x7a\x2b\xb6\xf5\x57\xfd\x58\xf0\xdc\x0c\x15\x3f\x36\x11\x7d\x10\xe4\x2f\xc0\xff\x02\x00\x00\xff\xff\x07\x8d\x75\x5a\x19\x0a\x00\x00"

func tmplListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplListHtml,
		"tmpl/list.html",
	)
}

func tmplListHtml() (*asset, error) {
	bytes, err := tmplListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/list.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/list.html": tmplListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"list.html": &bintree{tmplListHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

