// Code generated by go-bindata.
// sources:
// tmpl/list.html.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplListHtmlTmpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4f\x6f\xdb\x3e\x0c\x3d\xb7\x9f\x82\x3f\xff\x0e\x69\x81\xd6\xda\x0e\xbb\x74\x4e\x80\x16\x3b\xac\x18\x30\x14\xe8\x80\x1d\x8a\x60\x50\x24\x26\x56\xe7\x48\x86\xc4\xa4\x31\x0c\x7f\xf7\xc9\x96\xd3\xc8\x41\xfa\x07\x5b\x4e\x96\xc8\xf7\xc8\x27\x52\xa2\xb3\xff\xa4\x11\x54\x95\x08\x39\x2d\x8b\xc9\x69\x16\x3e\x00\x59\x8e\x5c\xb6\x0b\xbf\x2c\x94\xfe\x0d\x16\x8b\x71\xe2\xa8\x2a\xd0\xe5\x88\x94\x40\xcb\x1a\x27\x84\x1b\x62\xc2\xb9\x04\x72\x8b\xf3\x71\xc2\x98\x90\x3a\x7d\x74\x12\x0b\xb5\xb6\xa9\x46\x62\x4a\x3b\xe2\x9a\x1c\x72\x2b\x72\xef\x62\x1f\xf7\x4c\x4b\xa5\xd3\x2e\x04\xeb\x13\x92\xa2\x02\x27\x3f\x8c\xb5\xa8\x09\xee\xd1\xae\x95\xc0\x8c\x05\x73\x2b\x8e\x6d\xd5\x65\x33\x23\xab\x9e\xa5\x74\xb9\xa2\x48\x56\x02\x4a\x7a\xc9\x5d\x8e\xcb\x99\xd9\xec\xe2\x4b\xb5\x0e\x3e\x63\xe9\x72\x56\x5d\x0a\xa3\x89\x2b\x8d\x36\x99\x64\xcc\x3b\xf7\x61\xc4\xc9\xbd\x05\xca\xd5\xdb\x98\x92\x2f\x94\xe6\xa4\x8c\x3e\x80\x0c\x50\x27\xac\x2a\x09\x9c\x15\x7f\x5f\xcb\x47\xd7\x06\x0d\x91\x26\x71\xd8\xb0\x01\x58\x73\x0b\x01\x0f\x63\x18\xf0\xcf\xea\x1e\x02\xc0\xcb\xf2\x56\x5e\xc1\xe8\xe1\x21\xbd\x6e\x97\xd3\xe9\xe8\x22\x72\xaa\x6f\x58\x05\xef\x7d\xc7\xf4\xdb\x01\x42\x69\x89\x9b\xef\x7c\x89\x01\x74\xbb\xdd\x7a\x50\x8f\x69\xce\x3f\x9f\xf6\xcb\x5e\x3c\x97\xf2\xa7\x92\x0b\xa4\xb3\x28\x4c\x7c\xba\xa7\xce\xeb\xd2\xb0\xbd\x31\x9b\x48\x2f\xc0\x73\x4d\x7d\xca\xff\x77\x7d\x8f\x44\x01\x94\x05\x17\x98\x9b\x42\x76\xa8\x20\x3d\x4d\x53\x8f\x39\x39\xf1\xc7\x5a\x91\x99\x1b\xb1\x72\x57\x40\x76\x85\xc1\x58\x9a\x27\xb4\x28\x6f\xaa\xad\xf1\x39\x5c\x73\xde\x2f\xff\xe1\x24\xfe\x0a\xde\x54\xf7\x58\xa0\x20\x63\x5f\x39\xce\xfe\x55\x1d\x9c\xca\x17\xdb\xbf\x10\xaf\xfa\x21\x32\x02\xd4\xfa\x60\xfd\x2f\xa0\xe0\x33\x2c\xbc\xe3\x0b\x3a\x81\x9e\xab\x17\xa3\xe6\xe2\x1d\xd4\x5f\xdc\x89\x88\x7e\xbd\x63\x47\xe4\xe9\x51\xeb\xd3\xbe\xbd\x57\xca\x32\x7c\x9a\xa3\x63\xa6\x6e\x5f\xf4\xcb\x99\x87\xef\x7d\xd0\x0d\xc2\xa5\xbf\x66\xd4\xf6\xa3\x1e\x14\x55\x79\x8f\xe7\x66\xbc\x1f\x96\x39\x51\xe9\xae\x18\x23\x9b\x4a\xa4\x5c\xa5\x73\xcb\x24\x27\xce\xea\xfa\x56\xcf\xcd\x57\xee\xf2\xa6\x49\x89\xfb\x21\x51\xd7\x6d\x07\x9a\x26\x63\x7c\x32\x8a\x82\x36\xe1\x8e\xb6\x6a\xee\xd0\xde\xf1\x85\x6f\xda\xa7\x0f\xc7\x2c\xc3\x6e\x68\xbd\x5c\x8c\x43\x83\xed\x3d\xbd\xf0\xf9\x2c\x9d\x79\x73\x6b\x8b\x47\x56\xc6\xc2\x60\xf7\x93\xbe\xfb\x21\xfd\x09\x00\x00\xff\xff\x0f\xbd\x75\xf8\xa8\x06\x00\x00"

func tmplListHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplListHtmlTmpl,
		"tmpl/list.html.tmpl",
	)
}

func tmplListHtmlTmpl() (*asset, error) {
	bytes, err := tmplListHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/list.html.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/list.html.tmpl": tmplListHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"list.html.tmpl": &bintree{tmplListHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

