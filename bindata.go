// Code generated by go-bindata.
// sources:
// tmpl/list.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplListHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xcd\x8e\xdb\x36\x10\xbe\xe7\x29\x58\xdf\x25\x76\xb7\x41\x51\x14\x8a\x81\x16\x5b\xb4\x01\xda\x1e\x1a\x03\x3d\x8f\xc4\x91\xc9\x84\x22\x05\x72\xb4\x89\xb1\xf0\xbb\x77\xa8\x1f\xdb\x92\xec\x75\x0a\xc4\x17\x73\x38\xdf\x90\x33\xdf\xfc\x50\xc5\x77\xca\x57\x74\x68\x51\x68\x6a\xec\xf6\x4d\x31\xfc\x09\x51\x68\x04\x95\x16\xbc\x24\x43\x16\xb7\x3b\x1f\xba\x58\xc8\x41\x78\x33\x68\xac\x71\x9f\x44\x40\xfb\x6e\x13\xe9\x60\x31\x6a\x44\xda\x08\x1d\xb0\x7e\xb7\xd1\x44\x6d\xfc\x59\xca\x4a\xb9\x8f\x31\xaf\xac\xef\x54\x6d\x21\x60\x5e\xf9\x46\xc2\x47\xf8\x22\xad\x29\xa3\x2c\x3b\xdb\x80\xfc\x3e\x7f\xc8\x1f\x65\x15\x47\x39\x6f\x8c\xcb\x59\xda\x08\xb9\xfd\x66\x37\xd5\xde\x51\x06\x9f\x31\xfa\x06\xe5\xdb\xfc\xc7\xfc\x87\xfe\xc2\xcb\xed\xc5\xbd\x85\x9c\x58\x28\x4a\xaf\x0e\xa3\x2b\x11\x2b\x32\xde\x89\xca\x42\x8c\x7c\x3b\x06\x2f\x4c\xcc\xda\x60\x1a\x08\x87\xb4\x2c\xbd\x55\x9b\x01\xcd\x78\x65\x9e\x2f\xb1\x59\x3a\xea\xa4\x9d\xeb\x2b\xf6\x05\x8c\xc3\x70\xa1\x4f\xb9\x78\x98\x00\x3d\xfb\x9b\x29\x17\xfa\x61\x0e\x7b\x9c\x60\xb1\x2b\x47\xe4\x07\xd3\xb4\x16\x45\xd4\xcc\x07\x94\xbc\x22\x1f\x02\x3a\x12\x11\xc3\x33\x06\x3e\xe3\xf1\xc2\x15\xc9\xbe\x9c\xfc\x3e\x0b\x85\x1c\x63\x9e\xf2\xbe\xa0\x60\x14\xaf\x86\x5c\x79\xdb\x35\x2e\xde\x0c\x38\x69\x13\x67\x1a\x6c\x3d\x8f\xda\xc1\x09\x66\xf1\x19\xed\x4c\x3b\x3f\xa6\xd7\x67\x86\xb0\x11\x1a\x62\x46\xf8\x85\xb2\x8a\xa3\xc4\x80\x6a\x61\xc6\x86\xed\x39\x1d\xa0\x8c\xdb\xf7\x7c\x26\x52\x98\xd2\xf6\x36\x7a\x64\xf4\xe5\xc5\xa2\x13\xf9\x3f\x58\xf9\xa0\xe2\xf1\xb8\xb2\x99\xb1\xf8\xed\x7d\x7d\x32\xf1\x93\xf8\xd0\x42\x85\x5f\xe7\x6d\xfe\xcb\x33\x18\x9b\x72\x9f\x2c\x7b\xc3\xe3\x51\xfc\xfe\xeb\x7d\xbf\x0b\xc9\x29\x58\x55\xc7\xff\xce\x23\x04\x32\x15\x57\xde\x08\x6d\x30\x46\xd8\x63\xc2\x7e\x86\xe0\xfa\x98\x6e\x92\x35\x82\xb3\x14\x7d\xea\x8a\x7f\x07\x8b\x3b\x14\x4f\x56\x8b\x4e\x1b\x7e\x3b\x7d\x6a\x82\x28\xb8\x2b\x84\x42\x8b\x84\x4a\x40\xcd\x39\x10\x6f\x7f\x12\xda\x77\x21\x0a\xd5\x25\xdc\xd8\x27\xa2\x31\xfb\x00\xa9\xc8\xf3\x7b\x9c\x8d\xe1\xbe\xde\x55\x57\x1b\x65\xdd\xfb\x05\xf5\x3d\x3b\xa5\xb4\x17\x98\xb7\x48\xc1\xb4\x8b\x6a\x29\xe8\x3c\xb1\xcf\x7b\x61\x55\x20\xa4\xb7\x7f\x43\xc3\xb5\xc3\x8b\x2b\xba\x27\xa0\x9b\xba\x3f\x79\x06\xaf\x75\xbc\x13\xe6\x0c\xac\x3c\x29\xe8\x3c\x3e\xa7\xdf\xcb\x4b\x00\xc7\x65\x70\x6e\xa4\xfb\xae\xab\x54\xce\xc9\xfb\xd4\x75\xa4\x6e\x00\x7e\x73\x6a\x67\x5e\xc1\x4c\x74\x32\x91\xa6\xba\x98\x5a\x17\x20\x18\x5f\x16\xa9\x80\x40\xf2\x99\xef\x5d\xed\xff\x80\xa8\x8f\xc7\x9c\x20\x5c\x31\x61\x23\x33\x1d\x5c\x83\xa8\x21\xdb\x5b\x5f\x72\x03\x16\xd2\x5c\xb9\x40\xc2\xca\xb1\x95\xb3\x4b\x62\x13\x67\xe8\xd4\x8c\x28\xc6\xcc\xa9\xe5\x8d\x54\x25\x5f\x33\xc4\x6b\xef\x53\xc1\x4f\x4e\xf7\xd2\x8d\x11\x7e\xa5\x32\x17\xfa\xf4\xa4\xbc\x3e\xce\x8a\xe5\xb8\xe1\x2a\xf6\x6e\x3f\xbd\x65\xa3\x24\xca\xc3\x99\xfe\xf4\xb0\xf3\xbb\xae\x90\xb4\xc9\x6b\xbe\x7e\xa7\x4d\x09\x9d\x25\xf1\x84\x1d\xc5\x4a\x27\x1e\xe7\x0d\x99\xba\x3b\x72\xff\x56\xdc\x35\x5e\xa5\x6e\x11\xd6\xb0\x3f\x91\x1b\x7c\x79\xae\x6f\x79\xbf\xc7\xe6\x3e\xec\xe5\x88\x8b\xb2\x31\x94\x8d\x42\xde\xea\x76\xb3\xfd\xeb\xfd\x6e\x91\xb1\xc5\xf0\x5c\xc5\x06\xa7\x22\x4b\x15\xb6\xf8\x4e\xd9\x1b\xd2\x5d\xd9\x7f\x9d\xf4\xa1\x49\x4a\x14\xac\x67\xff\xb2\xa0\x7a\xb3\x2b\x15\xf5\x9a\x6f\xb7\x9f\xf4\x21\xe1\x7d\x31\x14\x72\x28\x22\xfe\x1a\xe8\x3f\xff\xfe\x0b\x00\x00\xff\xff\x15\x24\x76\x79\x16\x0a\x00\x00"

func tmplListHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplListHtml,
		"tmpl/list.html",
	)
}

func tmplListHtml() (*asset, error) {
	bytes, err := tmplListHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/list.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/list.html": tmplListHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"list.html": &bintree{tmplListHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

