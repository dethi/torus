// Code generated by go-bindata.
// sources:
// tmpl/list.html.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplListHtmlTmpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xc1\x6e\xdb\x30\x0c\x3d\xb7\x5f\xc1\x79\x87\xa4\xc0\x2a\x6d\x87\x5d\x32\x27\xc0\x7a\x5a\x30\x60\x28\xd0\x01\x3b\x14\x3d\xa8\x12\x13\xa9\x73\x24\x43\x62\xd2\x04\x81\xff\x7d\xb4\xe5\x34\x4e\xd1\x02\x43\xd1\x93\x29\xf2\x91\x7c\x8f\x12\x5d\x7e\x30\x41\xd3\xae\x46\xb0\xb4\xaa\x66\xe7\x65\xfe\x00\x94\x16\x95\x69\x0d\x36\x2b\xe7\xff\x42\xc4\x6a\x5a\x24\xda\x55\x98\x2c\x22\x15\x60\x23\x2e\xa6\x85\x94\xda\x78\xf1\x90\x0c\x56\x6e\x13\x85\x47\x92\xce\x27\x52\x9e\x12\xaa\xa8\x2d\x87\xe4\x97\x67\xae\x95\xf3\x42\xa7\x54\x80\xec\x1b\x90\xa3\x0a\x67\xbf\x43\x8c\xe8\x09\x6e\x30\x6e\x9c\xc6\x52\x66\x77\x4b\x46\x1e\xd8\x94\xf7\xc1\xec\xfa\x2c\xe7\xeb\x35\x41\x4b\x7e\x5a\x10\x6e\x99\x92\x33\x4c\xb1\xeb\x71\x79\x1f\xb6\xc7\xfa\xc6\x6d\xba\x98\x75\x94\x2e\x75\xf0\xa4\x9c\xc7\x58\xcc\x4a\xc9\x91\x67\x98\x5a\x2d\x9d\x57\xe4\x82\x7f\x01\x99\xa1\x49\x47\x57\x13\xa4\xa8\xdf\xae\xff\x21\xb5\x45\x73\xa5\xd9\xb0\x6c\x3e\x00\x6c\x54\x84\x8c\x87\x29\x9c\xe4\x8f\xf7\x3d\x04\x40\xd5\xf5\xdc\x4c\x60\x74\x7b\x2b\xbe\xb7\xe6\xdd\xdd\xe8\xd3\x20\xe8\x7e\xe2\x2e\x47\x6f\xba\x4c\x3e\x9e\x20\x9c\x37\xb8\xfd\xa5\x56\x98\x41\xf3\xc3\x91\x41\x3d\xa6\xb9\xf8\x76\xde\x9b\x3d\x79\x65\xcc\x1f\x67\x96\x48\xe3\x41\x99\xa1\xba\xc7\x2e\x9a\x44\x3e\x5e\x85\xed\x80\x2f\xc0\xd3\x4c\xb9\xe5\xc7\xe3\x5d\x0d\x48\x01\xd4\x95\xd2\x68\x43\x65\x3a\x54\xa6\x2e\x84\x60\xcc\xd9\x19\xcb\x5a\x53\x58\x04\xbd\x4e\x13\xa0\xb8\xc6\xec\xac\xc3\x23\x46\x34\x57\xbb\x83\xf3\xa9\x5c\x73\xd1\x9b\x6f\x57\xd2\x3e\x9b\xd7\x45\x9c\x3e\xaa\x13\x21\x84\x2b\xd6\x42\xc8\x54\x87\xe9\xdc\x87\x23\x9c\x5b\xaa\x7e\x8b\x2c\x51\x9d\x26\x52\x52\x14\x06\xc9\x3a\xb1\x88\xd2\x28\x52\x72\xbf\x9f\xfb\x45\xf8\xa1\x92\x6d\x1a\x41\x8a\x5f\xe2\x7e\xdf\xde\x50\xd3\x94\x52\xcd\x46\x83\xa2\x4d\x1e\x44\xcb\xe6\x1a\xe3\xb5\x5a\xf2\xa5\x7e\xfd\xfc\x9e\x63\x38\x6e\xc6\xeb\xc3\x78\x69\x7b\x46\xff\x41\x82\xfb\x45\x1a\xb3\xbb\xf5\x0d\xf7\xa2\x94\x79\xe3\xf9\x17\xd0\xfd\x99\xfe\x05\x00\x00\xff\xff\xe5\x96\x05\x0d\xb1\x04\x00\x00"

func tmplListHtmlTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplListHtmlTmpl,
		"tmpl/list.html.tmpl",
	)
}

func tmplListHtmlTmpl() (*asset, error) {
	bytes, err := tmplListHtmlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/list.html.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/list.html.tmpl": tmplListHtmlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"list.html.tmpl": &bintree{tmplListHtmlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

